[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date
# within the migration file as well as the filename.
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
timezone = UTC

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment file within a transaction,
# and to 'false' to run the environment file without a transaction.
# transaction_per_migration = false

# set to 'true' to allow .pyc and .pyo files without a source
# .py file to be detected as a 'versioned file' in the
# version directory (indicating that the file should be removed).
# sourceless = false

# version path separator; default to os.altsep or '/'
# version_path_separator = /

# the location to keep the database versions folder
# default to alembic/versions
# versions_location =

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# after generating new migration files.
# format is a name = module.path:function_name
# hooks = myhook

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for basic usage)
# "level = ERROR" logs errors only.

[logger_alembic]
level = INFO
handlers =
qualname = alembic
# "level = INFO" logs basic migration operations.
# "level = DEBUG" logs all "level = INFO" plus SQL commands.
# "level = WARN" logs only warnings and errors.
# "level = ERROR" logs only errors.

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
